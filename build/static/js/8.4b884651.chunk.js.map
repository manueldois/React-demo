{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread.js","components/Slider/Slider.js","routes/MemeGenerator/MemeGenerator.jsx"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","Slider","react_default","a","createElement","className","name","this","props","type","min","max","onChange","Component","MemeGenerator","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetch","then","res","json","data","memes","setState","all_memes","setRandomMeme","handleChange","e","_e$target","checked","text_style","state","fontWeight","fontStyle","color","fontSize","top_text","bottom_text","handleLoad","loaded_image","document","getElementById","focus","rnd","Math","floor","random","new_meme","current_meme","id","url","width","height","onClick","Slider_Slider_Slider","htmlFor","style","opacity","src","alt","onLoad","placeholder"],"mappings":"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","file":"static/js/8.4b884651.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import React, { Component } from 'react'\nimport './Slider.scss'\n\nexport default class Slider extends Component {\n    render() {\n        return (\n            <div className=\"Slider\">\n                <input name={this.props.name} type=\"range\" min={this.props.min} max={this.props.max} value={this.props.value} onChange={this.props.onChange}/>\n            </div>\n\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './MemeGenerator.scss'\nimport Slider from 'components/Slider/Slider';\n\nexport default class MemeGenerator extends Component {\n    constructor() {\n        super()\n        this.state = {\n            all_memes: [null],\n            current_meme: {\n                id: null,\n                name: null,\n                url: '',\n                width: null,\n                height: null,\n            },\n\n            loaded_image: false,\n\n            top_text: 'Top text',\n            bottom_text: 'Bottom text',\n\n            text_style: {\n                color: '#FFFFFF',\n                fontSize: \"30px\",\n                fontWeight: 'bold',\n                fontStyle: 'normal',\n            },\n        }\n    }\n\n    componentDidMount = () => {\n        fetch('https://api.imgflip.com/get_memes')\n            .then(res => res.json())\n            .then(res => res.data.memes)\n            .then(memes => { this.setState({ all_memes: memes }) })\n            .then(() => this.setRandomMeme())\n    }\n\n    handleChange = (e) => {\n        const { type, name, value, checked } = e.target\n        if (type === 'checkbox') {\n            if (name === 'bold') this.setState({ text_style: { ...this.state.text_style, fontWeight: checked ? 'bold' : 'normal' } })\n            if (name === 'italic') this.setState({ text_style: { ...this.state.text_style, fontStyle: checked ? 'italic' : 'normal' } })\n        }\n\n        if (type === 'color') {\n            if (name === 'color') this.setState({ text_style: { ...this.state.text_style, color: value } })\n        }\n\n        if (type === 'range') {\n            if (name === 'size') this.setState({ text_style: { ...this.state.text_style, fontSize: `${value}px` } })\n        }\n\n        if (type === 'text') {\n            if (name === 'top_text') this.setState({ top_text: value })\n            if (name === 'bottom_text') this.setState({ bottom_text: value })\n        }\n    }\n\n    handleLoad = (e) => {\n        this.setState({ loaded_image: true })\n        document.getElementById('meme-editor').focus()\n    }\n\n    setRandomMeme = () => {\n        const rnd = Math.floor(Math.random() * this.state.all_memes.length)\n        const new_meme = this.state.all_memes[rnd]\n        this.setState({\n            current_meme: new_meme,\n            loaded_image: false,\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"page MemeGeneratorPage\">\n                <h1>MemeGenerator</h1>\n\n                <div className=\"controls\">\n                    <button name=\"rnd_meme\" className=\"lg\" onClick={this.setRandomMeme}>Random Meme</button>\n                    <div>\n                        <label>\n                            <input name=\"bold\" type=\"checkbox\"\n                                checked={this.state.text_style.fontWeight === 'bold'}\n                                onChange={this.handleChange} />\n                            Bold\n                         </label>\n                        <label>\n                            <input name=\"italic\" type=\"checkbox\"\n                                checked={this.state.text_style.fontStyle === 'italic'}\n                                onChange={this.handleChange} />\n                            Italic\n                        </label>\n                        <label>\n                            <input name=\"color\" type=\"color\"\n                                value={this.state.text_style.color}\n                                onChange={this.handleChange} />\n                            Color\n                        </label>\n                    </div>\n                    <Slider name=\"size\" id=\"size\" min=\"20\" max='70' onChange={this.handleChange}></Slider>\n                    <label htmlFor=\"size\">Font size</label>\n                </div>\n\n                {!this.state.loaded_image && <h3 className=\"loading\">Loading..</h3>}\n\n                <div className=\"editor\" id=\"meme-editor\" style={{ opacity: this.state.loaded_image ? '1' : '0.2' }}>\n                    <img id=\"meme\" src={this.state.current_meme.url} alt=\"meme\" onLoad={this.handleLoad}></img>\n                    <input type=\"text\" style={this.state.text_style} name=\"top_text\" value={this.state.top_text} placeholder=\"Edit Top Text\" onChange={this.handleChange} />\n                    <input type=\"text\" style={this.state.text_style} name=\"bottom_text\" value={this.state.bottom_text} placeholder=\"Edit Bottom Text\" onChange={this.handleChange} />\n                </div>\n\n                <small>Saving would require a CORS enabled server</small>\n            </div>\n        )\n    }\n}\n"],"sourceRoot":""}