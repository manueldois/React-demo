{"version":3,"sources":["routes/Forms/Forms.jsx"],"names":["FormSchema","yup","shape","name","required","min","email","age","positive","integer","max","Forms","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","formik__WEBPACK_IMPORTED_MODULE_7__","initialValues","onSubmit","values","actions","alert","JSON","stringify","setSubmitting","validationSchema","props","errors","handleSubmit","isSubmitting","type","component","disabled","onClick","Component"],"mappings":"oPAOMA,EAAaC,WAAaC,MAAM,CAClCC,KAAMF,WAAaG,WAAWC,IAAI,EAAG,kBACrCC,MAAOL,WAAaK,MAAM,iBAAiBF,WAC3CG,IAAKN,WAEAG,WACAI,WACAC,UACAC,IAAI,IAAK,oBAAoBL,IAAI,EAAG,iCAIxBM,mLAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,cAAe,CAAEX,MAAO,GAAIH,KAAM,KAAMI,IAAK,IAE7CW,SAAU,SAACC,EAAQC,GACfC,MAAM,sBAAwBC,KAAKC,UAAUJ,IAC7CC,EAAQI,eAAc,IAc1BC,iBAAkBzB,GAGjB,SAAA0B,GAAS,IACEC,EAAuCD,EAAvCC,OAAQC,EAA+BF,EAA/BE,aAAcC,EAAiBH,EAAjBG,aAC9B,OACIjB,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOc,KAAK,QAAQ3B,KAAK,QAAQY,UAAWY,EAAOrB,MAAQ,mBAAqB,eAChFM,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcb,KAAK,QAAQ4B,UAAU,MAAMhB,UAAU,mBAEzDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOc,KAAK,OAAO3B,KAAK,OAAOY,UAAWY,EAAOxB,KAAO,mBAAqB,eAC7ES,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcb,KAAK,OAAO4B,UAAU,MAAMhB,UAAU,mBAExDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOc,KAAK,SAAS3B,KAAK,MAAMY,UAAWY,EAAOpB,IAAM,mBAAqB,eAC7EK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcb,KAAK,MAAM4B,UAAU,MAAMhB,UAAU,mBAGvDH,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASf,UAAU,KAAKiB,SAAUH,EAAcI,QAASL,GAAtE,qBA9CGM","file":"static/js/8.8b158a6b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Forms.scss'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport * as yup from 'yup';\n\n\nconst FormSchema = yup.object().shape({\n    name: yup.string().required().min(3, 'Name too short'),\n    email: yup.string().email('Invalid Email').required(),\n    age: yup\n        .number()\n        .required()\n        .positive()\n        .integer()\n        .max(100, 'Really that old?').min(5, 'You should\\'nt be online kid'),\n});\n\n\nexport default class Forms extends Component {\n    render() {\n        return (\n            <div className=\"page FormPage\">\n                <h1>Form demo</h1>\n                <h2>Formic + Yup</h2>\n\n                <Formik\n                    initialValues={{ email: '', name: 'me', age: 21 }}\n\n                    onSubmit={(values, actions) => {\n                        alert(\"Form submitted: \\n \" + JSON.stringify(values))\n                        actions.setSubmitting(false)\n                    }}\n\n                    // validate={values => {\n                    //     let errors = {};\n                    //     // ...\n                    //     if (values.email !== 'email') {\n                    //         errors.email = 'invalid'\n                    //     }\n                    //     if (Object.keys(errors).length) {\n                    //         return Promise.reject(errors)\n                    //     }\n                    // }}\n\n                    validationSchema={FormSchema}\n                >\n\n                    {props => {\n                        const { errors, handleSubmit ,isSubmitting } = props;\n                        return (\n                            <Form>\n                                <div className=\"input-group\">\n                                    <Field type=\"email\" name=\"email\" className={errors.email ? \"text-input error\" : \"text-input\"} />\n                                    <ErrorMessage name=\"email\" component=\"div\" className=\"error-message\" />\n                                </div>\n                                <div className=\"input-group\">\n                                    <Field type=\"text\" name=\"name\" className={errors.name ? \"text-input error\" : \"text-input\"} />\n                                    <ErrorMessage name=\"name\" component=\"div\" className=\"error-message\" />\n                                </div>\n                                <div className=\"input-group\">\n                                    <Field type=\"number\" name=\"age\" className={errors.age ? \"text-input error\" : \"text-input\"} />\n                                    <ErrorMessage name=\"age\" component=\"div\" className=\"error-message\" />\n                                </div>\n\n                                <button type=\"submit\" className=\"lg\" disabled={isSubmitting} onClick={handleSubmit}>\n                                    Submit\n                                </button>\n                            </Form>\n                        )\n                    }}\n\n                </Formik>\n            </div>\n        )\n    }\n}\n"],"sourceRoot":""}